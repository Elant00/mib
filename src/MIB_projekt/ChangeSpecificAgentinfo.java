/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB_projekt;

import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author antti
 */
public class ChangeSpecificAgentinfo extends javax.swing.JFrame {

    Validation validator = new Validation();
    private static InfDB idb;
    // Create a connection to the database

    /**
     * Creates new form LoginForm
     *
     * @param iidb
     */
    public ChangeSpecificAgentinfo(InfDB iidb) {
        initComponents();
        idb = iidb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        agentIDT = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        changeText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Phonenumber", "Employment date", "Password", "Area", "Email" }));

        jLabel1.setText("Select what to change");

        jLabel2.setText("Enter AgentID to change on");

        jButton2.setText("Confirm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter what to change to");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(agentIDT, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(changeText, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(agentIDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(changeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        AdminHomePage adminHome = new AdminHomePage(idb);
        adminHome.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String selectedItem = jComboBox1.getSelectedItem().toString();
        String agentID = agentIDT.getText();
        String change = changeText.getText();
        try {

            String sqlCheck = idb.fetchSingle("SELECT Agent_ID from agent WHERE Agent_ID = " + agentID);

            if (validator.isEmpty(agentID) || validator.isEmpty(change)) {
                JOptionPane.showMessageDialog(this, "You must enter an agentID as well as what change to make");
            } else if (validator.checkIfNull(sqlCheck)) {
                JOptionPane.showMessageDialog(this, "There is no agent with this ID");
            }

            if (selectedItem.equals("Name")) {
                if (validator.isNumeric(change)) {
                    JOptionPane.showMessageDialog(this, "You cannot enter a numerical value as a name for an agent");
                }
                String sqlQuestion = "UPDATE agent SET Namn = '" + change + "' WHERE Agent_ID = " + agentID;
                idb.update(sqlQuestion);
                JOptionPane.showMessageDialog(this, "Agent's name for ID: " + agentID + " has been updated to: " + change);

            }

            if (selectedItem.equals("Phonenumber")) {
                String sqlUpdate = "UPDATE agent SET Telefon = '" + change + "' WHERE Agent_ID = " + agentID;
                if (!validator.isNumeric(change)) { // Kollar om det nya telefonnumret som lagts in 채r numeriskt, s책 att ex inte bara bokst채ver l채ggs in
                    JOptionPane.showMessageDialog(this, "Please enter a numeric phone number");
                } else {
                    idb.update(sqlUpdate);
                    JOptionPane.showMessageDialog(this, "Phonenumber has been updated");
                }
            }

            if (selectedItem.equals("Employment date")) {
                String sqlEmploye = "UPDATE agent set Anstallningsdatum = '" + change + "' WHERE Agent_ID = " + agentID;
                if (!validator.isValidDate(change)) {
                    JOptionPane.showMessageDialog(this, "Input must be in this format with only numbers: xxxx-xx-xx");
                } else {
                    idb.update(sqlEmploye);
                    JOptionPane.showMessageDialog(this, "Employment date has been updated");
                }

            }

            if (selectedItem.equals("Password")) {
                String sqlPassword = "UPDATE agent SET Losenord = '" + change + "' WHERE Agent_ID = " + agentID;
                if (change.length() > 6) {
                    JOptionPane.showMessageDialog(this, "Password cannot be longer than 6 chars");
                } else {
                    idb.update(sqlPassword);
                    JOptionPane.showMessageDialog(this, "Password has been updated");
                }
            }

            if (selectedItem.equals("Area")) {
                String sqlCheckArea = "SELECT Omrades_ID from omrade WHERE Omrades_ID = " + change;
                String sqlArea = "UPDATE agent SET Omrade = " + change + " WHERE Agent_ID = " + agentID;

                if (!validator.isNumeric(change)) {
                    JOptionPane.showMessageDialog(this, "Please enter the new area as numerical, enter an areaID");
                }
                String answerArea = idb.fetchSingle(sqlCheckArea);
                if (validator.checkIfNull(answerArea)) {
                    JOptionPane.showMessageDialog(this, "There is no area with the ID you have entered");
                } else {
                    idb.update(sqlArea);
                    JOptionPane.showMessageDialog(this, "Area has been updated");
                }

            }

            if (selectedItem.equals("Email")) {
                String sqlMail = "UPDATE agent SET Epost = '" + change + "' WHERE Agent_ID = " + agentID;
                if (!change.endsWith("@mib.net")) {
                    JOptionPane.showMessageDialog(this, "The email must end in @mib.net");
                } else {
                    idb.update(sqlMail);
                    JOptionPane.showMessageDialog(this, "Email has been updated");
                }

            }

        } catch (InfException ex) {
            System.out.println("An exception occurred: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangeSpecificAgentinfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangeSpecificAgentinfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangeSpecificAgentinfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangeSpecificAgentinfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangeSpecificAgentinfo(idb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField agentIDT;
    private javax.swing.JTextField changeText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
